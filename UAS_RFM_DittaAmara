{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.7.10","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\nimport datetime as dt\nimport numpy as np\nimport matplotlib.pyplot as plt","metadata":{"execution":{"iopub.status.busy":"2021-07-17T16:13:07.590456Z","iopub.execute_input":"2021-07-17T16:13:07.590866Z","iopub.status.idle":"2021-07-17T16:13:07.602173Z","shell.execute_reply.started":"2021-07-17T16:13:07.590774Z","shell.execute_reply":"2021-07-17T16:13:07.601140Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"datatrx = pd.read_csv('../input/uasbigdata/UAS_RFM_BIGDATA.csv', sep=';', parse_dates=['TrxDate'])","metadata":{"execution":{"iopub.status.busy":"2021-07-17T16:13:33.201402Z","iopub.execute_input":"2021-07-17T16:13:33.201766Z","iopub.status.idle":"2021-07-17T16:13:33.306808Z","shell.execute_reply.started":"2021-07-17T16:13:33.201735Z","shell.execute_reply":"2021-07-17T16:13:33.306121Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"datatrx.head()","metadata":{"execution":{"iopub.status.busy":"2021-07-17T16:13:42.623013Z","iopub.execute_input":"2021-07-17T16:13:42.623650Z","iopub.status.idle":"2021-07-17T16:13:42.653879Z","shell.execute_reply.started":"2021-07-17T16:13:42.623612Z","shell.execute_reply":"2021-07-17T16:13:42.653123Z"},"trusted":true},"execution_count":3,"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"    CardID    TrxDate  Amount\n0  1000152 2021-02-22  670970\n1  1000158 2021-12-06  396433\n2  1000156 2021-05-24  114270\n3  1000115 2021-05-30  420477\n4  1000164 2021-06-23  361661","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>CardID</th>\n      <th>TrxDate</th>\n      <th>Amount</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1000152</td>\n      <td>2021-02-22</td>\n      <td>670970</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1000158</td>\n      <td>2021-12-06</td>\n      <td>396433</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1000156</td>\n      <td>2021-05-24</td>\n      <td>114270</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1000115</td>\n      <td>2021-05-30</td>\n      <td>420477</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1000164</td>\n      <td>2021-06-23</td>\n      <td>361661</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"datatrx.info()","metadata":{"execution":{"iopub.status.busy":"2021-07-17T16:13:53.257829Z","iopub.execute_input":"2021-07-17T16:13:53.258354Z","iopub.status.idle":"2021-07-17T16:13:53.278875Z","shell.execute_reply.started":"2021-07-17T16:13:53.258323Z","shell.execute_reply":"2021-07-17T16:13:53.277830Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 199 entries, 0 to 198\nData columns (total 3 columns):\n #   Column   Non-Null Count  Dtype         \n---  ------   --------------  -----         \n 0   CardID   199 non-null    int64         \n 1   TrxDate  199 non-null    datetime64[ns]\n 2   Amount   199 non-null    int64         \ndtypes: datetime64[ns](1), int64(2)\nmemory usage: 4.8 KB\n","output_type":"stream"}]},{"cell_type":"code","source":"print(datatrx['TrxDate'].min(), datatrx['TrxDate'].max())","metadata":{"execution":{"iopub.status.busy":"2021-07-17T16:14:03.195893Z","iopub.execute_input":"2021-07-17T16:14:03.196304Z","iopub.status.idle":"2021-07-17T16:14:03.202437Z","shell.execute_reply.started":"2021-07-17T16:14:03.196271Z","shell.execute_reply":"2021-07-17T16:14:03.201472Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"2021-01-02 00:00:00 2021-12-06 00:00:00\n","output_type":"stream"}]},{"cell_type":"code","source":"sd = dt.datetime(2021,12,11)\ndatatrx['hist']=sd - datatrx['TrxDate']\ndatatrx['hist'].astype('timedelta64[D]')\ndatatrx['hist']=datatrx['hist'] / np.timedelta64(1, 'D')\ndatatrx.head()","metadata":{"execution":{"iopub.status.busy":"2021-07-17T16:14:10.535136Z","iopub.execute_input":"2021-07-17T16:14:10.535532Z","iopub.status.idle":"2021-07-17T16:14:10.552793Z","shell.execute_reply.started":"2021-07-17T16:14:10.535498Z","shell.execute_reply":"2021-07-17T16:14:10.551748Z"},"trusted":true},"execution_count":6,"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"    CardID    TrxDate  Amount   hist\n0  1000152 2021-02-22  670970  292.0\n1  1000158 2021-12-06  396433    5.0\n2  1000156 2021-05-24  114270  201.0\n3  1000115 2021-05-30  420477  195.0\n4  1000164 2021-06-23  361661  171.0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>CardID</th>\n      <th>TrxDate</th>\n      <th>Amount</th>\n      <th>hist</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1000152</td>\n      <td>2021-02-22</td>\n      <td>670970</td>\n      <td>292.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1000158</td>\n      <td>2021-12-06</td>\n      <td>396433</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1000156</td>\n      <td>2021-05-24</td>\n      <td>114270</td>\n      <td>201.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1000115</td>\n      <td>2021-05-30</td>\n      <td>420477</td>\n      <td>195.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1000164</td>\n      <td>2021-06-23</td>\n      <td>361661</td>\n      <td>171.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"datatrx=datatrx[datatrx['hist'] < 700]\ndatatrx.info()","metadata":{"execution":{"iopub.status.busy":"2021-07-17T16:14:19.809708Z","iopub.execute_input":"2021-07-17T16:14:19.810079Z","iopub.status.idle":"2021-07-17T16:14:19.841349Z","shell.execute_reply.started":"2021-07-17T16:14:19.810045Z","shell.execute_reply":"2021-07-17T16:14:19.840281Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nInt64Index: 199 entries, 0 to 198\nData columns (total 4 columns):\n #   Column   Non-Null Count  Dtype         \n---  ------   --------------  -----         \n 0   CardID   199 non-null    int64         \n 1   TrxDate  199 non-null    datetime64[ns]\n 2   Amount   199 non-null    int64         \n 3   hist     199 non-null    float64       \ndtypes: datetime64[ns](1), float64(1), int64(2)\nmemory usage: 7.8 KB\n","output_type":"stream"}]},{"cell_type":"code","source":"rfmTable = datatrx.groupby('CardID').agg({'hist': lambda x:x.max(), # Recency\n                                        'CardID': lambda x: len(x),               # Frequency\n                                        'Amount': lambda x: x.sum()})          # Monetary Value\n\nrfmTable.rename(columns={'hist': 'recency', \n                         'CardID': 'frequency', \n                         'Amount': 'monetary_value'}, inplace=True)","metadata":{"execution":{"iopub.status.busy":"2021-07-17T16:14:31.515985Z","iopub.execute_input":"2021-07-17T16:14:31.516353Z","iopub.status.idle":"2021-07-17T16:14:31.536797Z","shell.execute_reply.started":"2021-07-17T16:14:31.516322Z","shell.execute_reply":"2021-07-17T16:14:31.535837Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"rfmTable.head ()","metadata":{"execution":{"iopub.status.busy":"2021-07-17T16:14:37.376079Z","iopub.execute_input":"2021-07-17T16:14:37.376442Z","iopub.status.idle":"2021-07-17T16:14:37.387321Z","shell.execute_reply.started":"2021-07-17T16:14:37.376411Z","shell.execute_reply":"2021-07-17T16:14:37.386515Z"},"trusted":true},"execution_count":10,"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"         recency  frequency  monetary_value\nCardID                                     \n1000101     99.0          1          157999\n1000102    342.0          3         1750216\n1000103    339.0          1          219348\n1000104    330.0          2         1070546\n1000105    322.0          5         3697893","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>recency</th>\n      <th>frequency</th>\n      <th>monetary_value</th>\n    </tr>\n    <tr>\n      <th>CardID</th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1000101</th>\n      <td>99.0</td>\n      <td>1</td>\n      <td>157999</td>\n    </tr>\n    <tr>\n      <th>1000102</th>\n      <td>342.0</td>\n      <td>3</td>\n      <td>1750216</td>\n    </tr>\n    <tr>\n      <th>1000103</th>\n      <td>339.0</td>\n      <td>1</td>\n      <td>219348</td>\n    </tr>\n    <tr>\n      <th>1000104</th>\n      <td>330.0</td>\n      <td>2</td>\n      <td>1070546</td>\n    </tr>\n    <tr>\n      <th>1000105</th>\n      <td>322.0</td>\n      <td>5</td>\n      <td>3697893</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"datatrx[datatrx['CardID']=='1000101']","metadata":{"execution":{"iopub.status.busy":"2021-07-17T16:14:45.945484Z","iopub.execute_input":"2021-07-17T16:14:45.946022Z","iopub.status.idle":"2021-07-17T16:14:45.956335Z","shell.execute_reply.started":"2021-07-17T16:14:45.945973Z","shell.execute_reply":"2021-07-17T16:14:45.955303Z"},"trusted":true},"execution_count":11,"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"Empty DataFrame\nColumns: [CardID, TrxDate, Amount, hist]\nIndex: []","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>CardID</th>\n      <th>TrxDate</th>\n      <th>Amount</th>\n      <th>hist</th>\n    </tr>\n  </thead>\n  <tbody>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"quartiles = rfmTable.quantile(q=[0.25,0.50,0.75])\nprint(quartiles, type(quartiles))","metadata":{"execution":{"iopub.status.busy":"2021-07-17T16:14:53.806229Z","iopub.execute_input":"2021-07-17T16:14:53.806602Z","iopub.status.idle":"2021-07-17T16:14:53.819371Z","shell.execute_reply.started":"2021-07-17T16:14:53.806569Z","shell.execute_reply":"2021-07-17T16:14:53.818360Z"},"trusted":true},"execution_count":12,"outputs":[{"name":"stdout","text":"      recency  frequency  monetary_value\n0.25    259.5        2.0        772656.0\n0.50    299.0        3.0       1134545.0\n0.75    326.0        3.0       1881032.5 <class 'pandas.core.frame.DataFrame'>\n","output_type":"stream"}]},{"cell_type":"code","source":"quartiles=quartiles.to_dict()\nquartiles","metadata":{"execution":{"iopub.status.busy":"2021-07-17T16:15:01.686371Z","iopub.execute_input":"2021-07-17T16:15:01.686729Z","iopub.status.idle":"2021-07-17T16:15:01.693660Z","shell.execute_reply.started":"2021-07-17T16:15:01.686700Z","shell.execute_reply":"2021-07-17T16:15:01.692553Z"},"trusted":true},"execution_count":13,"outputs":[{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"{'recency': {0.25: 259.5, 0.5: 299.0, 0.75: 326.0},\n 'frequency': {0.25: 2.0, 0.5: 3.0, 0.75: 3.0},\n 'monetary_value': {0.25: 772656.0, 0.5: 1134545.0, 0.75: 1881032.5}}"},"metadata":{}}]},{"cell_type":"code","source":"# for Recency \n\ndef RClass(x,p,d):\n    if x <= d[p][0.25]:\n        return 1\n    elif x <= d[p][0.50]:\n        return 2\n    elif x <= d[p][0.75]: \n        return 3\n    else:\n        return 4\n    \n## for Frequency and Monetary value \n\ndef FMClass(x,p,d):\n    if x <= d[p][0.25]:\n        return 4\n    elif x <= d[p][0.50]:\n        return 3\n    elif x <= d[p][0.75]: \n        return 2\n    else:\n        return 1","metadata":{"execution":{"iopub.status.busy":"2021-07-17T16:15:09.971287Z","iopub.execute_input":"2021-07-17T16:15:09.971761Z","iopub.status.idle":"2021-07-17T16:15:09.977988Z","shell.execute_reply.started":"2021-07-17T16:15:09.971730Z","shell.execute_reply":"2021-07-17T16:15:09.976995Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"rfmSeg = rfmTable\nrfmSeg['R_Quartile'] = rfmSeg['recency'].apply(RClass, args=('recency',quartiles,))\nrfmSeg['F_Quartile'] = rfmSeg['frequency'].apply(FMClass, args=('frequency',quartiles,))\nrfmSeg['M_Quartile'] = rfmSeg['monetary_value'].apply(FMClass, args=('monetary_value',quartiles,))","metadata":{"execution":{"iopub.status.busy":"2021-07-17T16:15:18.064637Z","iopub.execute_input":"2021-07-17T16:15:18.064981Z","iopub.status.idle":"2021-07-17T16:15:18.074791Z","shell.execute_reply.started":"2021-07-17T16:15:18.064952Z","shell.execute_reply":"2021-07-17T16:15:18.073765Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"code","source":"rfmSeg['RFMClass'] = rfmSeg.R_Quartile.map(str) \\\n                            + rfmSeg.F_Quartile.map(str) \\\n                            + rfmSeg.M_Quartile.map(str)","metadata":{"execution":{"iopub.status.busy":"2021-07-17T16:15:26.100370Z","iopub.execute_input":"2021-07-17T16:15:26.100716Z","iopub.status.idle":"2021-07-17T16:15:26.108516Z","shell.execute_reply.started":"2021-07-17T16:15:26.100683Z","shell.execute_reply":"2021-07-17T16:15:26.107467Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"code","source":"rfmSeg.head()","metadata":{"execution":{"iopub.status.busy":"2021-07-17T16:15:40.500807Z","iopub.execute_input":"2021-07-17T16:15:40.501212Z","iopub.status.idle":"2021-07-17T16:15:40.515515Z","shell.execute_reply.started":"2021-07-17T16:15:40.501175Z","shell.execute_reply":"2021-07-17T16:15:40.514534Z"},"trusted":true},"execution_count":17,"outputs":[{"execution_count":17,"output_type":"execute_result","data":{"text/plain":"         recency  frequency  monetary_value  R_Quartile  F_Quartile  \\\nCardID                                                                \n1000101     99.0          1          157999           1           4   \n1000102    342.0          3         1750216           4           3   \n1000103    339.0          1          219348           4           4   \n1000104    330.0          2         1070546           4           4   \n1000105    322.0          5         3697893           3           1   \n\n         M_Quartile RFMClass  \nCardID                        \n1000101           4      144  \n1000102           2      432  \n1000103           4      444  \n1000104           3      443  \n1000105           1      311  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>recency</th>\n      <th>frequency</th>\n      <th>monetary_value</th>\n      <th>R_Quartile</th>\n      <th>F_Quartile</th>\n      <th>M_Quartile</th>\n      <th>RFMClass</th>\n    </tr>\n    <tr>\n      <th>CardID</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1000101</th>\n      <td>99.0</td>\n      <td>1</td>\n      <td>157999</td>\n      <td>1</td>\n      <td>4</td>\n      <td>4</td>\n      <td>144</td>\n    </tr>\n    <tr>\n      <th>1000102</th>\n      <td>342.0</td>\n      <td>3</td>\n      <td>1750216</td>\n      <td>4</td>\n      <td>3</td>\n      <td>2</td>\n      <td>432</td>\n    </tr>\n    <tr>\n      <th>1000103</th>\n      <td>339.0</td>\n      <td>1</td>\n      <td>219348</td>\n      <td>4</td>\n      <td>4</td>\n      <td>4</td>\n      <td>444</td>\n    </tr>\n    <tr>\n      <th>1000104</th>\n      <td>330.0</td>\n      <td>2</td>\n      <td>1070546</td>\n      <td>4</td>\n      <td>4</td>\n      <td>3</td>\n      <td>443</td>\n    </tr>\n    <tr>\n      <th>1000105</th>\n      <td>322.0</td>\n      <td>5</td>\n      <td>3697893</td>\n      <td>3</td>\n      <td>1</td>\n      <td>1</td>\n      <td>311</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"rfmSeg.sort_values(by=['RFMClass', 'monetary_value'], ascending=[True, False])","metadata":{"execution":{"iopub.status.busy":"2021-07-17T16:15:48.752565Z","iopub.execute_input":"2021-07-17T16:15:48.752957Z","iopub.status.idle":"2021-07-17T16:15:48.779084Z","shell.execute_reply.started":"2021-07-17T16:15:48.752920Z","shell.execute_reply":"2021-07-17T16:15:48.778017Z"},"trusted":true},"execution_count":18,"outputs":[{"execution_count":18,"output_type":"execute_result","data":{"text/plain":"         recency  frequency  monetary_value  R_Quartile  F_Quartile  \\\nCardID                                                                \n1000125    219.0          4         2229160           1           1   \n1000141    226.0          3         1858542           1           3   \n1000167    209.0          3          620489           1           3   \n1000111    172.0          2         1211832           1           4   \n1000109    235.0          2         1119154           1           4   \n...          ...        ...             ...         ...         ...   \n1000138    342.0          2         1006220           4           4   \n1000170    331.0          2          927142           4           4   \n1000160    341.0          2          827777           4           4   \n1000128    329.0          1          297404           4           4   \n1000103    339.0          1          219348           4           4   \n\n         M_Quartile RFMClass  \nCardID                        \n1000125           1      111  \n1000141           2      132  \n1000167           4      134  \n1000111           2      142  \n1000109           3      143  \n...             ...      ...  \n1000138           3      443  \n1000170           3      443  \n1000160           3      443  \n1000128           4      444  \n1000103           4      444  \n\n[71 rows x 7 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>recency</th>\n      <th>frequency</th>\n      <th>monetary_value</th>\n      <th>R_Quartile</th>\n      <th>F_Quartile</th>\n      <th>M_Quartile</th>\n      <th>RFMClass</th>\n    </tr>\n    <tr>\n      <th>CardID</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1000125</th>\n      <td>219.0</td>\n      <td>4</td>\n      <td>2229160</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>111</td>\n    </tr>\n    <tr>\n      <th>1000141</th>\n      <td>226.0</td>\n      <td>3</td>\n      <td>1858542</td>\n      <td>1</td>\n      <td>3</td>\n      <td>2</td>\n      <td>132</td>\n    </tr>\n    <tr>\n      <th>1000167</th>\n      <td>209.0</td>\n      <td>3</td>\n      <td>620489</td>\n      <td>1</td>\n      <td>3</td>\n      <td>4</td>\n      <td>134</td>\n    </tr>\n    <tr>\n      <th>1000111</th>\n      <td>172.0</td>\n      <td>2</td>\n      <td>1211832</td>\n      <td>1</td>\n      <td>4</td>\n      <td>2</td>\n      <td>142</td>\n    </tr>\n    <tr>\n      <th>1000109</th>\n      <td>235.0</td>\n      <td>2</td>\n      <td>1119154</td>\n      <td>1</td>\n      <td>4</td>\n      <td>3</td>\n      <td>143</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1000138</th>\n      <td>342.0</td>\n      <td>2</td>\n      <td>1006220</td>\n      <td>4</td>\n      <td>4</td>\n      <td>3</td>\n      <td>443</td>\n    </tr>\n    <tr>\n      <th>1000170</th>\n      <td>331.0</td>\n      <td>2</td>\n      <td>927142</td>\n      <td>4</td>\n      <td>4</td>\n      <td>3</td>\n      <td>443</td>\n    </tr>\n    <tr>\n      <th>1000160</th>\n      <td>341.0</td>\n      <td>2</td>\n      <td>827777</td>\n      <td>4</td>\n      <td>4</td>\n      <td>3</td>\n      <td>443</td>\n    </tr>\n    <tr>\n      <th>1000128</th>\n      <td>329.0</td>\n      <td>1</td>\n      <td>297404</td>\n      <td>4</td>\n      <td>4</td>\n      <td>4</td>\n      <td>444</td>\n    </tr>\n    <tr>\n      <th>1000103</th>\n      <td>339.0</td>\n      <td>1</td>\n      <td>219348</td>\n      <td>4</td>\n      <td>4</td>\n      <td>4</td>\n      <td>444</td>\n    </tr>\n  </tbody>\n</table>\n<p>71 rows × 7 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"rfmSeg.groupby('RFMClass').agg('monetary_value').mean()","metadata":{"execution":{"iopub.status.busy":"2021-07-17T16:15:56.926849Z","iopub.execute_input":"2021-07-17T16:15:56.927199Z","iopub.status.idle":"2021-07-17T16:15:56.939450Z","shell.execute_reply.started":"2021-07-17T16:15:56.927169Z","shell.execute_reply":"2021-07-17T16:15:56.938249Z"},"trusted":true},"execution_count":19,"outputs":[{"execution_count":19,"output_type":"execute_result","data":{"text/plain":"RFMClass\n111    2.229160e+06\n132    1.858542e+06\n134    6.204890e+05\n142    1.211832e+06\n143    9.189567e+05\n144    3.181540e+05\n211    3.019236e+06\n231    1.934874e+06\n232    1.413416e+06\n233    1.027622e+06\n234    6.449400e+05\n242    1.436691e+06\n243    8.671800e+05\n244    3.474747e+05\n311    3.671680e+06\n331    2.281209e+06\n333    1.013723e+06\n334    7.509860e+05\n342    1.321509e+06\n343    9.496230e+05\n344    6.134603e+05\n411    3.939496e+06\n412    1.686152e+06\n431    2.340770e+06\n432    1.676428e+06\n433    1.134545e+06\n442    1.552235e+06\n443    9.579212e+05\n444    2.583760e+05\nName: monetary_value, dtype: float64"},"metadata":{}}]},{"cell_type":"code","source":"rfmSeg['Total Score'] = rfmSeg['R_Quartile'] + rfmSeg['F_Quartile'] +rfmSeg['M_Quartile']\nprint(rfmSeg.head(), rfmSeg.info())","metadata":{"execution":{"iopub.status.busy":"2021-07-17T16:16:05.844433Z","iopub.execute_input":"2021-07-17T16:16:05.844786Z","iopub.status.idle":"2021-07-17T16:16:05.871461Z","shell.execute_reply.started":"2021-07-17T16:16:05.844757Z","shell.execute_reply":"2021-07-17T16:16:05.870238Z"},"trusted":true},"execution_count":20,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nInt64Index: 71 entries, 1000101 to 1000174\nData columns (total 8 columns):\n #   Column          Non-Null Count  Dtype  \n---  ------          --------------  -----  \n 0   recency         71 non-null     float64\n 1   frequency       71 non-null     int64  \n 2   monetary_value  71 non-null     int64  \n 3   R_Quartile      71 non-null     int64  \n 4   F_Quartile      71 non-null     int64  \n 5   M_Quartile      71 non-null     int64  \n 6   RFMClass        71 non-null     object \n 7   Total Score     71 non-null     int64  \ndtypes: float64(1), int64(6), object(1)\nmemory usage: 5.0+ KB\n         recency  frequency  monetary_value  R_Quartile  F_Quartile  \\\nCardID                                                                \n1000101     99.0          1          157999           1           4   \n1000102    342.0          3         1750216           4           3   \n1000103    339.0          1          219348           4           4   \n1000104    330.0          2         1070546           4           4   \n1000105    322.0          5         3697893           3           1   \n\n         M_Quartile RFMClass  Total Score  \nCardID                                     \n1000101           4      144            9  \n1000102           2      432            9  \n1000103           4      444           12  \n1000104           3      443           11  \n1000105           1      311            5   None\n","output_type":"stream"}]},{"cell_type":"code","source":"rfmSeg.groupby('Total Score').agg('monetary_value').mean()","metadata":{"execution":{"iopub.status.busy":"2021-07-17T16:16:15.051429Z","iopub.execute_input":"2021-07-17T16:16:15.051994Z","iopub.status.idle":"2021-07-17T16:16:15.061514Z","shell.execute_reply.started":"2021-07-17T16:16:15.051960Z","shell.execute_reply":"2021-07-17T16:16:15.060314Z"},"trusted":true},"execution_count":21,"outputs":[{"execution_count":21,"output_type":"execute_result","data":{"text/plain":"Total Score\n3     2.229160e+06\n4     3.019236e+06\n5     3.671680e+06\n6     2.924463e+06\n7     1.682088e+06\n8     1.107913e+06\n9     7.251758e+05\n10    8.143399e+05\n11    8.102951e+05\n12    2.583760e+05\nName: monetary_value, dtype: float64"},"metadata":{}}]},{"cell_type":"code","source":"print(\"Pelanggan Tetap: \",len(rfmSeg[rfmSeg['RFMClass']=='444']))\nprint('Langganan: ',len(rfmSeg[rfmSeg['F_Quartile']==4]))\nprint(\"Pembeli banyak: \",len(rfmSeg[rfmSeg['M_Quartile']==4]))\nprint(\"Beresiko: \",len(rfmSeg[rfmSeg['R_Quartile']==1]))\nprint('Lost: ', len(rfmSeg[rfmSeg['RFMClass']=='111']))\nprint('Pelanggan berpotensial: ', len(rfmSeg[rfmSeg['RFMClass']=='333']) + len(rfmSeg[rfmSeg['RFMClass']=='444']))\nprint('Butuh Perhatian: ', len(rfmSeg[rfmSeg['RFMClass']=='222']) + len(rfmSeg[rfmSeg['RFMClass']=='111']))","metadata":{"execution":{"iopub.status.busy":"2021-07-17T16:16:21.729800Z","iopub.execute_input":"2021-07-17T16:16:21.730385Z","iopub.status.idle":"2021-07-17T16:16:21.749698Z","shell.execute_reply.started":"2021-07-17T16:16:21.730347Z","shell.execute_reply":"2021-07-17T16:16:21.748410Z"},"trusted":true},"execution_count":22,"outputs":[{"name":"stdout","text":"Pelanggan Tetap:  2\nLangganan:  35\nPembeli banyak:  18\nBeresiko:  18\nLost:  1\nPelanggan berpotensial:  3\nButuh Perhatian:  1\n","output_type":"stream"}]},{"cell_type":"code","source":"plt.title","metadata":{"execution":{"iopub.status.busy":"2021-07-17T16:16:31.142633Z","iopub.execute_input":"2021-07-17T16:16:31.142978Z","iopub.status.idle":"2021-07-17T16:16:31.148747Z","shell.execute_reply.started":"2021-07-17T16:16:31.142948Z","shell.execute_reply":"2021-07-17T16:16:31.147608Z"},"trusted":true},"execution_count":23,"outputs":[{"execution_count":23,"output_type":"execute_result","data":{"text/plain":"<function matplotlib.pyplot.title(label, fontdict=None, loc=None, pad=None, *, y=None, **kwargs)>"},"metadata":{}}]}]}